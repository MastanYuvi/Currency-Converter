{"version":3,"sources":["CurrencyRow.js","App.js","index.js"],"names":["CurrencyRow","rates","SelectedCurrency","OnChangeCurrency","amount","onchangeAmount","type","className","value","onChange","map","option","key","uuidv4","App","toAmount","fromAmount","BASE_URL","useState","currency","setCurrency","fromCurrency","setFromCurrency","toCurrency","setToCurrency","exhangeRate","setExchangeRate","Amount","setAmount","amountInFromCurrency","setamountInFromCurrency","useEffect","getCurrenncyRate","fetch","then","res","json","data","a","result","FirstCurrency","Object","keys","base","e","target","ReactDOM","render","document","getElementById"],"mappings":"sQAGe,SAASA,EAAT,GAA2F,IAArEC,EAAoE,EAApEA,MAAOC,EAA6D,EAA7DA,iBAAkBC,EAA2C,EAA3CA,iBAAkBC,EAAyB,EAAzBA,OAAQC,EAAiB,EAAjBA,eAEpF,OACI,6BACI,2BAAOC,KAAK,SAASC,UAAU,QAAQC,MAAOJ,EAAQK,SAAUJ,IAChE,4BAAQG,MAAON,EAAkBO,SAAUN,GAGlCF,EAAMS,KAAI,SAAAC,GAAM,OACb,4BAAQC,IAAKC,eAAUL,MAAOG,GAASA,Q,cCPhD,SAASG,IAEtB,IAQIC,EAAUC,EARRC,EAAW,yCAFW,EAGIC,mBAAS,IAHb,mBAGrBC,EAHqB,KAGXC,EAHW,OAIYF,qBAJZ,mBAIrBG,EAJqB,KAIPC,EAJO,OAKQJ,qBALR,mBAKrBK,EALqB,KAKTC,EALS,OAMWN,qBANX,mBAMrBO,EANqB,KAMRC,EANQ,OAOAR,mBAAS,GAPT,mBAOrBS,EAPqB,KAObC,EAPa,OAQ4BV,oBAAS,GARrC,mBAQrBW,EARqB,KAQCC,EARD,KAWzBD,GACDb,EAAaW,EACbZ,EAAWY,EAASF,IAEpBV,EAAWY,EACXX,EAAaW,EAAQF,GAGvBM,qBAAU,WACRC,MACC,IAEHD,qBAAU,WACW,MAAhBV,GAAsC,MAAdE,GACzBU,MAAM,GAAD,OAAIhB,EAAJ,iBAAqBI,EAArB,oBAA6CE,IACjDW,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UACdF,MAAK,SAAAG,GAAI,OAAIX,EAAgBW,EAAKpC,MAAMsB,UAI/C,IAAMS,EAAgB,uCAAG,sBAAAM,EAAA,sEAEAL,MAAMhB,GAC5BiB,MAAK,SAAAK,GAAM,OAAIA,EAAOH,UACtBF,MAAK,SAAAG,GACJ,IAAMG,EAAgBC,OAAOC,KAAKL,EAAKpC,OAAO,GAC9CmB,EAAY,CAACiB,EAAKM,MAAP,mBAAgBF,OAAOC,KAAKL,EAAKpC,UAC5CqB,EAAgBe,EAAKM,MACrBnB,EAAcgB,GACdd,EAAgBW,EAAKpC,MAAMuC,OATN,yDAAH,qDAwBtB,OACE,yBAAKjC,UAAU,WACb,uCACA,kBAACP,EAAD,CACAC,MAASkB,EACTjB,iBAAoBmB,EACpBlB,iBAAoB,SAACyC,GAAD,OAAOtB,EAAgBsB,EAAEC,OAAOrC,QACpDH,eAjBqB,SAACuC,GACxBhB,EAAUgB,EAAEC,OAAOrC,OACnBsB,GAAwB,IAgBtB1B,OAAUY,IAEV,gCACA,kBAAChB,EAAD,CACAC,MAASkB,EACTjB,iBAAoBqB,EACpBpB,iBAAoB,SAACyC,GAAD,OAAOpB,EAAcoB,EAAEC,OAAOrC,QAClDJ,OAAUW,EACVV,eArBmB,SAACuC,GACtBhB,EAAUgB,EAAEC,OAAOrC,OACnBsB,GAAwB,OCrD5BgB,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,W","file":"static/js/main.e023317e.chunk.js","sourcesContent":["import React from 'react';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nexport default function CurrencyRow({rates, SelectedCurrency, OnChangeCurrency, amount, onchangeAmount}) {\r\n\r\n    return (\r\n        <div>\r\n            <input type=\"number\" className=\"input\" value={amount} onChange={onchangeAmount}/>\r\n            <select value={SelectedCurrency} onChange={OnChangeCurrency}>\r\n\r\n\r\n                    {rates.map(option => (\r\n                        <option key={uuidv4()} value={option}>{option}</option>\r\n                    ))}\r\n                        \r\n                    \r\n                    \r\n            \r\n                \r\n            </select>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useState,useEffect} from 'react';\nimport CurrencyRow from './CurrencyRow';\nimport './App.css';\nimport { fireEvent } from '@testing-library/react';\n\nexport default function App() {\n\n  const BASE_URL = \"https://api.exchangeratesapi.io/latest\";\n  const [currency, setCurrency] = useState([]);\n  const [fromCurrency, setFromCurrency] = useState();\n  const [toCurrency, setToCurrency] = useState();\n  const [exhangeRate, setExchangeRate] = useState();\n  const [Amount, setAmount] = useState(1);\n  const [amountInFromCurrency, setamountInFromCurrency] = useState(true)\n  \n  let toAmount, fromAmount;\n  if(amountInFromCurrency){\n    fromAmount = Amount;\n    toAmount = Amount * exhangeRate;\n  }else{\n    toAmount = Amount;\n    fromAmount = Amount/ exhangeRate;\n  }\n\n  useEffect(() => {\n    getCurrenncyRate();\n  }, [])\n\n  useEffect(() => {\n    if(fromCurrency != null && toCurrency != null){\n      fetch(`${BASE_URL}?base=${fromCurrency}&symbols=${toCurrency}`)\n      .then(res => res.json())\n        .then(data => setExchangeRate(data.rates[toCurrency]))\n    }  \n  })\n\n  const getCurrenncyRate = async () => {\n\n    const response = await fetch(BASE_URL)\n    .then(result => result.json())\n    .then(data => {\n      const FirstCurrency = Object.keys(data.rates)[0];\n      setCurrency([data.base, ...Object.keys(data.rates)]);\n      setFromCurrency(data.base);\n      setToCurrency(FirstCurrency);\n      setExchangeRate(data.rates[FirstCurrency]);\n    })\n  }\n\n\n  const FromAmountChange = (e) => {\n    setAmount(e.target.value)\n    setamountInFromCurrency(true)\n  }\n\n  const ToAmountChange = (e) => {\n    setAmount(e.target.value)\n    setamountInFromCurrency(false)\n  }\n\n  return (\n    <div className=\"Apptoid\">\n      <h1>Convert</h1>\n      <CurrencyRow \n      rates = {currency}\n      SelectedCurrency = {fromCurrency}\n      OnChangeCurrency = {(e) => setFromCurrency(e.target.value)}\n      onchangeAmount = {FromAmountChange}\n      amount = {fromAmount}\n      />\n      <p>=</p>\n      <CurrencyRow \n      rates = {currency}\n      SelectedCurrency = {toCurrency}\n      OnChangeCurrency = {(e) => setToCurrency(e.target.value)}\n      amount = {toAmount}\n      onchangeAmount = {ToAmountChange}\n      />\n    </div>\n  )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}